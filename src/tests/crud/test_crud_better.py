import allure
import pytest

from conftest import create_token
from src.constants.api_constants import APIConstants
from src.helpers.api_requests_wrapper import *
from src.helpers.common_verification import *
from src.helpers.payload_manager import *
from src.utils.utils import *


class TestCRUDBooking(object) :
    @pytest.mark.positive
    @allure.title("Verify that Create Booking Status and Booking ID shouldn't be null")
    @allure.description(
        "Creating a Booking from the paylaod and verfiy that booking id should not be null and status code should be 200 for the correct payload")
    def test_create_booking_id (self) :
        payload = payload_create_booking()
        response = post_request(
            url=APIConstants().url_create_booking(),
            headers=Utils().common_headers_json(),
            auth=None,
            payload=payload,
            in_json=False
        )
        resp = response.json()
        allure.attach(str(payload), name="Request payload", attachment_type=allure.attachment_type.JSON)
        allure.attach(str(resp), name="Response payload", attachment_type=allure.attachment_type.JSON)

        try :
            with allure.step("Verify that the status code is 200") :
                verify_http_status_code(response_data=response, expected_data=200)
                print('Status Code------------>>', response.status_code)

            with allure.step("Verify that booking ID is not null") :
                verify_json_key_for_not_null(resp["bookingid"])
                allure.attach(str(resp["bookingid"]), name="BOOKING ID", attachment_type=allure.attachment_type.JSON)

            with allure.step("Verify that Request and Response Payload have same data except autogenerated BookingID") :
                verify_response_key(resp["booking"]["firstname"], payload["firstname"])
                # logger.info("Verify the Firstname tag value between Request and Response-",resp["booking"]["firstname"] ," and",  payload["firstname"])
                # print("Verify the Firstname tag value between Request and Response-", resp["booking"]["firstname"], " and",payload["firstname"])
                verify_response_key(resp["booking"]["firstname"], payload["firstname"])
                verify_response_key(resp["booking"]["lastname"], payload["lastname"])
                verify_response_key(resp["booking"]["totalprice"], payload["totalprice"])
                verify_response_key(resp["booking"]["depositpaid"], payload["depositpaid"])
                verify_response_key(resp["booking"]["bookingdates"]["checkin"], payload["bookingdates"]["checkin"])
                verify_response_key(resp["booking"]["bookingdates"]["checkout"], payload["bookingdates"]["checkout"])
                verify_response_key(resp["booking"]["additionalneeds"], payload["additionalneeds"])
        except AssertionError as e :
            allure.attach(str(e), name="Assertion Error", attachment_type=allure.attachment_type.TEXT)
            raise  # Re-raise the exception to ensure the test fails in pytest


    @pytest.mark.put
    @allure.title("Test CRUD operation Update(PUT).")
    @allure.description(
    "Verify that Full Update with the booking ID and Token is working.")
    def test_update_booking_id_token (self, create_token, get_booking_id) :
        put_url = APIConstants.url_patch_put_delete(booking_id=get_booking_id)
        payload = payload_update_booking()
        print("get booking ID:", get_booking_id)
        response = put_requests(
        url=put_url,
        headers=Utils().common_header_put_delete_patch_cookie(token=create_token),
        payload=payload,
        auth=None,
        in_json=False
    )
        resp1 = response.json()
        with allure.step("Verify that the status code is 200", ) :
            verify_http_status_code(response_data=response, expected_data=200)
        with allure.step("Verify Request and Response payload before and after UPDATE with BookingID and Token") :
            allure.attach(str(payload), name="Request payload", attachment_type=allure.attachment_type.JSON)
            allure.attach(str(resp1), name="Response payload after UPDATE", attachment_type=allure.attachment_type.JSON)
            allure.attach(str(get_booking_id), name="BOOKING ID", attachment_type=allure.attachment_type.JSON)
            # Verification here & more
            verify_response_key(resp1["firstname"], "Aishani")
            verify_response_key(resp1["lastname"], "Mukherjee")


    def test_delete_booking_id (self, create_token, get_booking_id) :
        delete_url = APIConstants.url_patch_put_delete(booking_id=get_booking_id)
        response = delete_requests(
        url=delete_url,
        headers=Utils().common_header_put_delete_patch_cookie(token=create_token),
        auth=None,
        in_json=False
    )
        verify_response_delete(response=response.text)
        verify_http_status_code(response_data=response, expected_data=201)


    # @pytest.mark.GET
    # @allure.title("Test CRUD operation (GET).")
    # @allure.description("Verify the GET response  with the newly generated booking ID")
    def test_get_booking_details_after_create_booking (self, get_booking_id) :
        url = APIConstants.url_patch_put_delete(booking_id=get_booking_id)
        print("get url", url)
        print("get booking ID:", get_booking_id)
        response = get_request(
        url=url,
        auth=None,
        payload={},
        in_json=False
    )
        allure.attach(str(get_booking_id), name="BOOKING ID", attachment_type=allure.attachment_type.JSON)
        allure.attach(str(response), name="Response payload", attachment_type=allure.attachment_type.JSON)
